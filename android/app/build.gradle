def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.thl.flutterwanandroid"
        minSdkVersion 17
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

//        ndk {
//            //选择要添加的对应 cpu 类型的 .so 库。
//            abiFilters 'armeabi', 'armeabi-v7a', 'x86', 'x86_64', 'mips', 'mips64', 'arm64-v8a'
//        }


//        ndk {
//            //选择要添加的对应 cpu 类型的 .so 库。
////            abiFilters  'armeabi-v7a','x86','x86_64'
//            abiFilters 'armeabi', 'armeabi-v7a', 'armeabi-v8a'
//        }

        manifestPlaceholders = [
                JPUSH_PKGNAME : applicationId,
                JPUSH_APPKEY : "f3ec3edba9f954c719c2a36a", // NOTE: JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL : "developer-default", //暂时填写默认值即可.
        ]

        multiDexEnabled true

    }

    signingConfigs {
        debug {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
//        debug {
//            // TODO: Add your own signing config for the release build.
//            // Signing with the debug keys for now, so `flutter run --release` works.
////            signingConfig signingConfigs.debug
//            signingConfig signingConfigs.debug
//            ndk {
//                //选择要添加的对应 cpu 类型的 .so 库。
//                abiFilters  'armeabi-v7a','x86'
//            }
//        }
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
//            signingConfig signingConfigs.debug
            signingConfig signingConfigs.release
            ndk {
                //选择要添加的对应 cpu 类型的 .so 库。
                abiFilters  'armeabi-v7a','armeabi', 'x86', 'x86_64', 'mips', 'mips64', 'arm64-v8a'
//                abiFilters 'armeabi', 'armeabi-v7a', 'x86', 'x86_64', 'mips', 'mips64', 'arm64-v8a'
            }
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    implementation "me.leolin:ShortcutBadger:1.1.22@aar"
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:multidex:1.0.3'
//    androidTestImplementation 'com.android.support.test:runner:1.0.2'
//    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //工具类
    implementation 'com.github.xuexiangjys.XUtil:xutil-core:1.1.6'
    implementation 'com.github.xuexiangjys.XUtil:xutil-sub:1.1.6'

    //推送核心库
    implementation 'com.github.xuexiangjys.XPush:xpush-core:1.0.1'
    //推送保活库
    implementation 'com.github.xuexiangjys.XPush:keeplive:1.0.1'

    implementation 'com.github.xuexiangjys.XPush:xpush-huawei:1.0.1'
    implementation 'com.github.xuexiangjys.XPush:xpush-xiaomi:1.0.1'

}
//configurations.all {
//    resolutionStrategy {
//        force 'com.android.support:support-v4:27.1.1'
//
//    }
//}